, image = TRUE, land = TRUE
plot(map2, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map2), greys),
c(min(map2), 0, blues)))
plot(rich, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map2), greys),
c(min(map2), 0, blues)))
plot(map, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map2), greys),
c(min(map2), 0, blues)))
plot(map, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map2), greys),
c(min(map2), 0, blues)))
par(new=TRUE)
plot(rich)
plot(map, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map2), greys),
c(min(map2), 0, blues)))
plot(rich)
ggplot(map, aes(rich))
ggplot(map)
# Plot bathy object using custom ggplot2 functions
autoplot(map, geom=c("r", "c"), colour="white", size=0.1) + scale_fill_etopo()
points(gps_data2, col=couleurs[organismes], pch=19, cex=0.7)
points(gps_data2, col=couleurs[organismes], pch=19, cex=0.7)
points(gps_data, col=couleurs2[especes], pch=19, cex=0.7)
map_df <- Grid2Polygons(as.SpatialGridDataFrame(map),
level=TRUE, pretty=TRUE)
map_df <- Grid2Polygons(as.SpatialGridDataFrame(map),
level=TRUE, pretty=TRUE)
library(Grid2Polygons)
install.packages("Grid2Polygons")
library(Grid2Polygons)
geom_map(data=map, map=map,
aes(map_id=id), color="black", fill="white")
geom_map(data=map,
aes(map_id=id), color="black", fill="white")
##############################################################################
# map avec topography
plot(map, geom=c("r", "c"), colour="white", size=0.1) + scale_fill_etopo()
##############################################################################
# map avec topography
autoplot(map, geom=c("r", "c"), colour="white", size=0.1) + scale_fill_etopo()
autpolot(map, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map2), greys),
c(min(map2), 0, blues)))
autoplot(map, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map2), greys),
c(min(map2), 0, blues)))
plot(map, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map2), greys),
c(min(map2), 0, blues)))
##############################################################################
# map avec topography
autoplot(map, geom=c("r", "c"), colour="white", size=0.1) + scale_fill_etopo()
##############################################################################
# map avec topography
autoplot(map, geom=c("r", "c"), colour="white", size=0.5) + scale_fill_etopo()
##############################################################################
# map avec topography
autoplot(map, geom=c("r", "c"), colour="white", size=0.1) + scale_fill_etopo()
##############################################################################
# map avec topography
autoplot(map, geom=c("r", "c"), colour="white", size=0.1) + scale_fill_etopo(-5000, 5000)
?scale_fill_etopo
title(main="carte topography mediterranée occidentale")
##############################################################################
# map avec topography
autoplot(map, geom=c("r", "c"), colour="white", size=0.1) + scale_fill_etopo()
title(main="carte topography mediterranée occidentale")
mtext(main="carte topography mediterranée occidentale")
plot(rich)
med_france<-get_map(location=c(lon = 6.35 , lat = 40.5), zoom = 6, language= "fr-FR", maptype="satellite")
#API avec google
register_google(="")
library(ggmap)
#trouver map mediterranée et med française terrain, roadmap ou satellite pour le maptype
library(RgoogleMaps)
#API avec google
register_google(="")
#API avec google
register_google("")
med_france<-get_map(location=c(lon = 6.35 , lat = 40.5), zoom = 6, language= "fr-FR", maptype="satellite")
stat_density_2d(aes(fill = ..level..), alpha=.5, geom="polygon", data = gps) +
scale_fill_viridis_c()
ggmap(med_france) + stat_density_2d(aes(fill = ..level..), alpha=.5, geom="polygon", data = gps) +
scale_fill_viridis_c() +
ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + ggplot(rich) +
ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
rich_df<-as.data.frame(rich)
med_france<-get_map(location=c(lon = 6.35 , lat = 40.5), zoom = 6, language= "fr-FR", maptype="satellite")
ggmap(med_france) + ggplot(rich) +
ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france)  +
ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + plot(rich) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + ggplot(rich) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(rich) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(data=rich,aes(fill = id), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(data=rich_df,aes(fill = id), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(data=rich_df,aes(fill = gps), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(data=rich_df,aes(fill = rich_df), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(data=rich_df,aes(), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(data=rich_df,aes(fill = id), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(data=rich_df,aes(fill = rich), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(data=rich_df,aes(fill = colour), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(data=rich_df,aes(fill = colours), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(data=rich_df,aes(fill = gps_data), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(data=rich_df,aes(fill = gps_data$NOMCITE), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(data=rich_df,aes(fill = ...level...), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(data=rich_df,aes(fill = 1), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(data=rich_df,aes(1), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(data=rich_df,aes(,11), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(data=rich_df,aes(1,1), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(data=rich_df,aes(x=lon, y=lat), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
ggmap(med_france) + geom_sf(data=rich_df,aes(x="lon", y="lat"), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
rich_df
med_france
names(med_france)
ggmap(med_france) + geom_sf(data=rich_df,aes(med_france), pch = 21) + ggtitle("Carte de densité d'observations élasmobranches en méditerranée française")
plot(rich)
plot(map_fr)
plot(rich)
library(BIEN)
library(rgdal)
library(letsR)
library(maptools)
library(ggplot2)
library(ape)
library(classInt)
library(plotly)
map(add = TRUE)
data(wrld_simpl)  # World map
NoAme <- c("France")
na <- wrld_simpl[wrld_simpl$NAME %in% NoAme, ]
PAM_na <- lets.pamcrop(PAM, na, remove.sp = TRUE)
##############################################################################
#########essai 3 richesse spécifique #########################################
install.packages("BIEN")
##############################################################################
#########essai 3 richesse spécifique #########################################
install.packages("letsR")
##############################################################################
#########essai 3 richesse spécifique #########################################
install.packages("plotly")
PAM_na <- lets.pamcrop(PAM, na, remove.sp = TRUE)
library(BIEN)
library(rgdal)
library(letsR)
library(maptools)
library(ggplot2)
library(ape)
library(classInt)
library(plotly)
PAM_na <- lets.pamcrop(PAM, na, remove.sp = TRUE)
data(wrld_simpl)  # World map
NoAme <- c("France")
na <- wrld_simpl[wrld_simpl$NAME %in% NoAme, ]
PAM_na <- lets.pamcrop(PAM, na, remove.sp = TRUE)
NoAme <- c("Mediterranean")
na <- wrld_simpl[wrld_simpl$NAME %in% NoAme, ]
PAM_na <- lets.pamcrop(PAM, na, remove.sp = TRUE)
PAM_na <- lets.pamcrop(rich_df, na, remove.sp = TRUE)
rich_df
map <- getNOAA.bathy(lon1 = -16, lon2 = 73,
lat1 = -14, lat2 = 48,  resolution = 10)
gps<- data.frame(FinalData_na$LON, FinalData_na$LAT, 1:888)
colnames(gps)<-c("LON", "LAT")
gps$LON<-as.numeric(as.character(FinalData_na$LON))
gps$LAT<-as.numeric(as.character(FinalData_na$LAT))
library(marmap)
map <- getNOAA.bathy(lon1 = -16, lon2 = 73,
lat1 = -14, lat2 = 48,  resolution = 10)
gps <- as.bathy(gps)
sp<-get.depth(map,gps[,1:2],x=LON, y=LAT, locator=FALSE)
sp
#####################################################################
########### TELECHARGEMENT DES DONNEES PAR DATE #####################
#####################################################################
setwd("C:/Users/Miquel Pons/Desktop/AIleron projet SP/data")
# on choisi une date, par exemple le 22 juillet 2019
date = as.Date('2019-07-22')
date
# objet date a utiliser pour le data_file
date = format(date, '%Y%m%d')
# objet da à utiliser pour l'URL
da<-substr(date, 1, 6)
#on réécrit
data_url = paste0("https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr/",da,"/")
data_url
#on indique le fichier a télécharger
data_file = paste0("oisst-avhrr-v02r01.", date, ".nc")
data_file
#on télécharge le fichier ncdf, si jamais le fichier est déja téléchargé on imprime un message
if(!file.exists(data_file)){
download.file(url = data_url, destfile = data_file)
} else {
message('SST deja present dans votre repertoire :\n', data_file)
}
library(rmarkdown)
render("1-example.Rmd", output_format = "word_document")
library(prettydoc)
install.packages("prettydoc")
library(prettydoc)
getwd()
getwd()
blogdown blogdown::new_site()
blogdown::stop_server()
rm(list=ls())
coucou
setwd("C:/Users/Miquel Pons/Desktop/")
dataNA<-read.table("poissons.txt", sep=";", header=TRUE, row.names=1)
data<-na.omit(dataNA)
data
dim(data)
summary(data)
varexp<-data[,1:4]
varexp
varrep<-data[,5:18]
varrep
varrep2<-varrep[,c(1,2,3,5,6,9,11,12,13,14)]
varrep2
data2<-cbind(varexp,varrep2)
data2
dim(varrep2)
cor(data2$Prof,varrep2) #correlation entre la profondeur et l'abaondance des espèces
summary(varexp) #stat descriptives
par(mfrow=c(1,3))
barplot(table(varexp[,1]), col="black")
barplot(table(varexp[,2]), col="grey")
barplot(table(varexp[,3]), col="white")
par(mfrow=c(1,1))
##correlation
cor(varrep2)
##############################################################################
#Transformation de données en tableaux
BuseTapis<-colSums(subset(data2, data2$Mod=="BuseTapis", select=c(5:14)))
BuseTapis<-colSums(subset(data2, data2$Mod=="BuseTapis", select=c(5:14)))
Proto<-colSums(subset(data2, data2$Mod=="Proto", select=c(5:14)))
Panier<-colSums(subset(data2, data2$Mod=="Panier", select=c(5:14)))
Panier
Chaude<-colSums(subset(data2, data2$Sais=="Chaude", select=c(5:14)))
Froide<-colSums(subset(data2, data2$Sais=="Froide", select=c(5:14)))
Chaude
Froide
AbondSais<-cbind(Chaude, Froide)
AbondSais
chisq.test(AbondSais)
Z1<-colSums(subset(data2, data2$Zone=="Z1", select=c(5:14)))
Z2<-colSums(subset(data2, data2$Zone=="Z2", select=c(5:14)))
Z3<-colSums(subset(data2, data2$Zone=="Z3", select=c(5:14)))
Z4<-colSums(subset(data2, data2$Zone=="Z4", select=c(5:14)))
Zone<-cbind(Z1,Z2,Z3,Z4)
Zone
knitr::opts_chunk$set(echo = TRUE)
setwd ("C:/Users/Miquel Pons/Desktop")
poi <- read.table("poissons.txt", sep = ";") #créer un objet table contenant les données du tableau poisson.txt, l'argument "sep" indique que les colonnes sont séparés par des ";"
poiNA<-na.omit(poi)
dim(poi)
dim(poiNA)
setwd ("C:/Users/Miquel Pons/Documents/starter-blog/static/files")
poi <- read.table("poissons.txt", sep = ";") #créer un objet table contenant les données du tableau poisson.txt, l'argument "sep" indique que les colonnes sont séparés par des ";"
setwd ("C:/Users/Miquel Pons/Documents/starter-blog/static/files")
poi <- read.table("poissons.txt", sep = ";") #créer un objet table contenant les données du tableau poisson.txt, l'argument "sep" indique que les colonnes sont séparés par des ";"
View(poiNA)
View(poiNA)
varx<-poiNA[,1:4]
varx<-poiNA[,1:4]
vary<-poiNA[,5:18]
##############################################################################
#Transformation de données en tableaux
BuseTapis<-colSums(subset(data2, data2$Mod=="BuseTapis", select=c(5:14)))
BuseTapis
BuseTapis<-colSums(subset(data2, data2$Mod=="BuseTapis", select=c(5:14)))
Proto<-colSums(subset(data2, data2$Mod=="Proto", select=c(5:14)))
Panier<-colSums(subset(data2, data2$Mod=="Panier", select=c(5:14)))
Panier
Chaude<-colSums(subset(data2, data2$Sais=="Chaude", select=c(5:14)))
Froide<-colSums(subset(data2, data2$Sais=="Froide", select=c(5:14)))
Chaude
Froide
AbondSais<-cbind(Chaude, Froide)
AbondSais
chisq.test(AbondSais)
Z1<-colSums(subset(data2, data2$Zone=="Z1", select=c(5:14)))
Z2<-colSums(subset(data2, data2$Zone=="Z2", select=c(5:14)))
Z3<-colSums(subset(data2, data2$Zone=="Z3", select=c(5:14)))
Z4<-colSums(subset(data2, data2$Zone=="Z4", select=c(5:14)))
Zone<-cbind(Z1,Z2,Z3,Z4)
AbondMod<-cbind(BuseTapis,Proto,Panier)
P10<-colSums(subset(data2, data2$Prof=="10", select=c(5:14)))
P11<-colSums(subset(data2, data2$Prof=="11", select=c(5:14)))
P14<-colSums(subset(data2, data2$Prof=="14", select=c(5:14)))
P16<-colSums(subset(data2, data2$Prof=="16", select=c(5:14)))
P30<-colSums(subset(data2, data2$Prof=="30", select=c(5:14)))
AbondProf<-cbind(P10,P11,P14,P16,P30)
AbondProf
###################################################################
#Transformation de données en tableaux QUALI pour cela additionner deux colonne de variable qualitative
#pour en avoir qu'une seule
BuseTapisZ1<-subset(data2, data2$Mod=="BuseTapis")
BuseTapisZ1
BuseTapisZ1<-subset(BuseTapisZ1,BuseTapisZ1$Zone=="Z1")
BuseTapisZ1<-colSums(BuseTapisZ1[,5:14])
BuseTapisZ1Chaude
BuseTapisZ2<-subset(data2, data2$Mod=="BuseTapis")
BuseTapisZ2<-subset(BuseTapisZ2,BuseTapisZ2$Zone=="Z2")
BuseTapisZ2<-colSums(BuseTapisZ2[,5:14])
BuseTapisZ2
BuseTapisZ3<-subset(data2, data2$Mod=="BuseTapis")
BuseTapisZ3<-subset(BuseTapisZ3,BuseTapisZ3$Zone=="Z3")
BuseTapisZ3<-colSums(BuseTapisZ3[,5:14])
BuseTapisZ3
BuseTapisZ4<-subset(data2, data2$Mod=="BuseTapis")
BuseTapisZ4<-subset(BuseTapisZ4,BuseTapisZ4$Zone=="Z4")
BuseTapisZ4<-colSums(BuseTapisZ4[,5:14])
BuseTapisZ4
BUSETAPIS2<-cbind(BuseTapisZ1,BuseTapisZ2,BuseTapisZ3,BuseTapisZ4)
sum(BUSETAPIS2) # 327
sum(subset(data2,data2$Mod=="BuseTapis", select=c(5:14))) #verification 327 le compte est bon
ProtoZ1<-subset(data2, data2$Mod=="Proto")
ProtoZ1
ProtoZ1<-subset(ProtoZ1,ProtoZ1$Zone=="Z1")
ProtoZ1
ProtoZ1<-colSums(ProtoZ1[,5:14])
ProtoZ1
ProtoZ2<-subset(data2, data2$Mod=="Proto")
ProtoZ2
ProtoZ2<-subset(ProtoZ2,ProtoZ2$Zone=="Z2")
ProtoZ2<-colSums(ProtoZ2[,5:14])
ProtoZ2
ProtoZ3<-subset(data2, data2$Mod=="Proto")
ProtoZ3<-subset(ProtoZ3,ProtoZ3$Zone=="Z3")
ProtoZ3<-colSums(ProtoZ3[,5:14])
ProtoZ3
ProtoZ4<-subset(data2, data2$Mod=="Proto")
ProtoZ4<-subset(ProtoZ4,ProtoZ4$Zone=="Z4")
ProtoZ4<-colSums(ProtoZ4[,5:14])
ProtoZ4
PROTO2<-cbind(ProtoZ1,ProtoZ2,ProtoZ3,ProtoZ4)
sum(PROTO2) # résultat = 195
sum(subset(data2,data2$Mod=="Proto", select=c(5:14))) #verification résultat = 195 le compte est bon
PanierZ1<-subset(data2, data2$Mod=="Panier")
PanierZ1
PanierZ1<-subset(PanierZ1,PanierZ1$Zone=="Z1")
PanierZ1
PanierZ1<-colSums(PanierZ1[,5:14])
PanierZ1
PanierZ2<-subset(data2, data2$Mod=="Panier")
PanierZ2
PanierZ2<-subset(PanierZ2,PanierZ2$Zone=="Z2")
PanierZ2<-colSums(PanierZ2[,5:14])
PanierZ2
PanierZ3<-subset(data2, data2$Mod=="Panier")
PanierZ3<-subset(PanierZ3,PanierZ3$Zone=="Z3")
PanierZ3<-colSums(PanierZ3[,5:14])
PanierZ3
PanierZ4<-subset(data2, data2$Mod=="Panier")
PanierZ4<-subset(PanierZ4,PanierZ4$Zone=="Z4")
PanierZ4<-colSums(PanierZ4[,5:14])
PanierZ4
PANIER2<-cbind(PanierZ1,PanierZ2,PanierZ3,PanierZ4)
sum(PANIER2) # résultat = 195
sum(subset(data2,data2$Mod=="Panier", select=c(5:14))) #verification résultat = 195 le compte est bon
Abondances2<-cbind(BUSETAPIS2,PROTO2, PANIER2)
sum(Abondances2) ##816
sum(data2[,5:14])##816 les valeurs correspondent pas d'erreur
barplot(t(Abondances2),beside=T )
colSums(Abondances2)
Abondances3<-Abondances2[,c(1,2,5,6,11,12)]
Abondances3
# ACP Abondances2
Abondances2
Abondances2hell<-decostand(Abondances2, "hellinger")
ACPnew<-PCA(Abondances2)
fviz_pca_biplot(ACPnewhell, label =c("var","ind"), col.ind="cos2",gradient.cols = c("green", "red", "blue"), col.var="black", repel=T) + theme_minimal()
fviz_pca_biplot(ACPnew, axes=c(1,3), label =c("var","ind"), col.ind="cos2",gradient.cols = c("green", "red", "blue"), col.var="black", repel=T) + theme_minimal()
fviz_screeplot (ACPnew, addlabels = TRUE, ylim = c(0, 70))
#ACP Abondances3
colSums(Abondances2)
Abondances3<-Abondances2[,c(1,2,5,6,11,12)]
Abondances3
Abondances2
ACPnew2<-PCA(Abondances3, axes=c(3,4))
Abondances3hell<-decostand(Abondances3, "hellinger")
ACPnewhell2<-PCA(Abondances3hell)
fviz_pca_biplot(ACPnew2, label =c("var","ind"), col.ind="cos2",gradient.cols = c("green", "red", "blue"), col.var="black", repel=T) + theme_minimal()
fviz_pca_biplot(ACPnew2, axes=c(3,4), label =c("var","ind"), col.ind="cos2",gradient.cols = c("green", "red", "blue"), col.var="black", repel=T)
fviz_screeplot (ACPnew2, addlabels = TRUE, ylim = c(0, 50))
ACPnewhell2$var
#avec hellinger
fviz_pca_biplot(ACPnewhell2, label =c("var","ind"), col.ind="cos2",gradient.cols = c("green", "red", "blue"), col.var="black", repel=T)
fviz_pca_biplot(ACPnewhell2, axes=c(3,4), label =c("var","ind"), col.ind="cos2",gradient.cols = c("green", "red", "blue"), col.var="black", repel=T)
fviz_screeplot (ACPnewhell2, addlabels = TRUE, ylim = c(0, 40))
plotellipses(ACPnewhell2)
ACPnewhell2$var
ACPnewhell2$ind
ACPnewhell2$call
BuseTapisZ1<-subset(data2, data2$Mod=="BuseTapis")
BuseTapisZ1
BuseTapisZ1<-subset(BuseTapisZ1,BuseTapisZ1$Zone=="Z1")
BuseTapisZ1<-colSums(BuseTapisZ1[,5:14])
BuseTapisZ1Chaude
BuseTapisZ2<-subset(data2, data2$Mod=="BuseTapis")
BuseTapisZ2<-subset(BuseTapisZ2,BuseTapisZ2$Zone=="Z2")
BuseTapisZ2<-colSums(BuseTapisZ2[,5:14])
BuseTapisZ2
BuseTapisZ3<-subset(data2, data2$Mod=="BuseTapis")
BuseTapisZ3<-subset(BuseTapisZ3,BuseTapisZ3$Zone=="Z3")
BuseTapisZ3<-colSums(BuseTapisZ3[,5:14])
BuseTapisZ3
BuseTapisZ4<-subset(data2, data2$Mod=="BuseTapis")
BuseTapisZ4<-subset(BuseTapisZ4,BuseTapisZ4$Zone=="Z4")
BuseTapisZ4<-colSums(BuseTapisZ4[,5:14])
BuseTapisZ4
BUSETAPIS2<-cbind(BuseTapisZ1,BuseTapisZ2,BuseTapisZ3,BuseTapisZ4)
BUSETAPIS2
sum(PROTO2) # résultat = 195
PROTO2
subset(data2, data2$Mod=="BuseTapis")
subset(BuseTapisZ1,BuseTapisZ1$Zone=="Z1")
###################################################################
#Transformation de données en tableaux QUALI pour cela additionner deux colonne de variable qualitative
#pour en avoir qu'une seule
BuseTapisZ1<-subset(data2, data2$Mod=="BuseTapis")
subset(BuseTapisZ1,BuseTapisZ1$Zone=="Z1")
colSums(BuseTapisZ1[,5:14])
library(dplyr)
varx
vary
df<- c(vax, vary)
df<- c(varx, vary)
df
View(df)
View(df)
df<- cbind(varx, vary)
df
View(poiNA)
View(poiNA)
group_by(data2, Zone == "BuseTapis")
group_by(data2, Mod == "BuseTapis")
ok<- group_by(data2, Mod == "BuseTapis")
ok
View(ok)
View(ok)
filter(data2, Mod == "BuseTapis")
colSums(filter(data2, Mod == "BuseTapis"))
colSums(filter(vary, Mod == "BuseTapis"))
data2
colSums(filter(data2, Mod == "BuseTapis"))
BuseTapisZ1<-subset(BuseTapisZ1,BuseTapisZ1$Zone=="Z1")
BuseTapisZ1
# ACP Abondances2
Abondances2
poi <- read.table("donnees.csv", sep = ";") #créer un objet table contenant les données du tableau poisson.txt, l'argument "sep" indique que les colonnes sont séparés par des ";"
poiNA<-na.omit(poi)
head(poiNA)
Abondances3
Abondances2
#ACP Abondances3
colSums(Abondances2)
ACPnew2<-PCA(poiNA, axes=c(1,2))
library(factoextra)
ACPnew2<-PCA(poiNA, axes=c(1,2))
library(FactoMineR)
ACPnew2<-PCA(poiNA, axes=c(1,2))
head(poiNA)
poissons<-poiNA[, 2:5]
head(poissons)
ACPnew2<-PCA(poiNA, axes=c(1,2))
Abondances3
data("decathlon")
decathlon
poi <- read.table("poissons.csv", sep = ";") #créer un objet table contenant les données du tableau poisson.txt, l'argument "sep" indique que les colonnes sont séparés par des ";"
head(poissons)
poi <- read.table("poissons.csv", sep = ";") #créer un objet table contenant les données du tableau poisson.txt, l'argument "sep" indique que les colonnes sont séparés par des ";"
poiNA<-na.omit(poi)
head(poiNA)
varx<-data[,1:4]
varx<-data[,1:4]
vary<-data[,5:18]
varrep
summary(vary)
varx<-data[,1:4]
vary<-data[,5:18]
summary(varx)
summary(varx)
vary<-vary[,-4]
vary
par(mfrow=c(1,3))
barplot(table(varexp[,1]), col="black")
barplot(table(varexp[,2]), col="grey")
barplot(table(varexp[,3]), col="white")
par(mfrow=c(1,1))
par(mfrow=c(1,3))
barplot(table(varx[,1]), col="black")
barplot(table(varx[,2]), col="grey")
barplot(table(varx[,3]), col="white")
par(mfrow=c(1,3))
barplot(table(varx[,1]), col="black")
barplot(table(varx[,2]), col="grey")
barplot(table(varx[,3]), col="white")
hisq.test(table(varexp[,3]))
##test stat khi2
chisq.test(table(varexp[,3]))
cor(varx)
cor(vary)
AbondProf
# ACP Abondances2
Abondances2
Abondances3
