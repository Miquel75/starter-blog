LON<-as.numeric(as.character(FinalData_na$X))
min(LON)
max(LON)
LAT<-as.numeric(as.character(FinalData_na$Y))
min(LAT)
max(LAT)
dim(FinalData)
FinalData[1:50,]
f<-FinalData[1:50,]
dim(f)
f<-FinalData[1:20,]
dim(f)
write.csv2(f, "f.csv")
write.csv2
?write.csv2
write.csv2(f, file ="C:/Users/Miquel Pons/Documents/starter-blog/static/files",  "f.csv")
write.csv2(f,  "f.csv")
getwd)
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath("C:/Users\Miquel Pons\Documents\starter-blog\static\files"))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath("C:/Users/Miquel Pons/Documents/starter-blog/static/files"))
knitr::kable
table <- function(data) { knitr::kable(data) }
library(marmap)
library(dplyr)
library(tidyr)
library(forcats)
#certaine cartes nécessitent un API google map, pour se connecter il faut se créer un compte. Ce service est payant selon les services.
#register_google("APIKey")
donnees<-read.csv2('donnees.csv',header=TRUE,sep=';')
library(marmap)
library(dplyr)
library(tidyr)
library(forcats)
#certaine cartes nécessitent un API google map, pour se connecter il faut se créer un compte. Ce service est payant selon les services.
#register_google("APIKey")
donnees<-read.csv2('donnees.csv',header=TRUE,sep=';')
#Selectionner les données utiles pour faire les cartes
names(donnees)
donnees_filt<-donnees %>%
dplyr::select(1,CLEOBS, NOMCITE, X, Y, DATEDEBUT)
#visualiser les données manquantes
sapply(donnees_filt,function(x) sum(is.na(x)))
#supprimer les lignes avec valeurs manquantes, fonction drop_na du package 'tidyr'
donnees_na <- donnees_filt %>% drop_na(X,Y)
#taille de la carte
class(donnees_na$X)
LON<-as.numeric(as.character(donnees_na$X))
min(LON)
max(LON)
LAT<-as.numeric(as.character(donnees_na$Y))
min(LAT)
max(LAT)
library(marmap)
library(dplyr)
library(tidyr)
library(forcats)
#on importe les données
donnees<-read.csv2('donnees.csv',header=TRUE,sep=';')
#Selectionner les données utiles pour faire les cartes
names(donnees)
donnees_filt<-donnees %>%
dplyr::select(1,CLEOBS, NOMCITE, X, Y, DATEDEBUT)
#visualiser les données manquantes
sapply(donnees_filt,function(x) sum(is.na(x)))
#supprimer les lignes avec valeurs manquantes, fonction drop_na du package 'tidyr'
donnees_na <- donnees_filt %>% drop_na(X,Y)
#renommer si nécessaire le nom des variables de nos observations
colnames(donnees_na)<-c("","CLEOBS","NOMCITE","LON","LAT","DATEDEBUT")
#renommer si nécessaire le nom des variables de nos observations
colnames(donnees_na)<-c("","CLEOBS","NOMCITE","LON","LAT","DATEDEBUT")
#renommer si nécessaire le nom des variables de nos observations
colnames(donnees_na)<-c("","CLEOBS","NOMCITE","LON","LAT","DATEDEBUT")
#renommer si nécessaire le nom des variables de nos observations
colnames(donnees_na)<-c("CLEOBS","NOMCITE","LON","LAT","DATEDEBUT")
#format numérique pour les données de latitudes et de longitudes
donnees_na$LON<-as.numeric(as.character(donnees_na$LON))
donnees_na$LAT<-as.numeric(as.character(donnees_na$LAT))
#création d'un data frame pour faire la carte
donnees_df<- data.frame(donnees_na$LON, donnees_na$LAT, donnees_na$NOMCITE)
colnames(donnees_df)<-c("LON", "LAT","NOMCITE")
#on récupère les données de bathymétrie avec getNOAA.bathy, une fonction de marmap
map <- getNOAA.bathy(lon1 = -5, lon2 = 30,
lat1 = 34, lat2 = 45,  resolution = 10, keep = T)
blues <- c("lightsteelblue4", "lightsteelblue3",
"lightsteelblue2", "lightsteelblue1")
greys <- c(grey(0.6), grey(0.93), grey(0.99))
plot(map, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map), greys),
c(min(map), 0, blues)))
#renommer les espèces pour clarifier la carte
#1"Aetobatus narinari" = "Raie leopard"
#2"Cetorhinus maximus" = "Requin pelerin"
#3"Myliobatis aquila" = "Raie aigle"
#4"Pteroplatytrygon violacea" = "Raie pastenague violette"
#5"Rhincodon typus" = "Requin baleine"
#6"Raja undulata" = "Raie brunette"
#7"Scyliorhinus canicula" = "Petite roussette"
#8"Torpedo marmorata" =  "Raie torpille marbrée"
#9"Dasyatis pastinaca" = "Raie pastenague"
#10"Raies" = "Raie"
#11"Scyliorhinus stellaris" = "Requin Grande roussette"
#12"Dasyatis centroura" = "Raie pastenague épineuse"
#13"Mobula mobular" = "Raie Diable de mer mediterranéen"
#14"Prionace glauca" = "Requin bleu"
#15"Requins" = "Requin"
#16"Torpedo" = "Raie electrique"
#renommer les données avec le package "forcats" et la fonction fct_recode
gps_data$NOMCITE <- fct_recode(gps_data$NOMCITE, "Raja undulata" = "undulata", "Scyliorhinus canicula" =                 "canicula","Torpedo marmorata" = "marmorata", "Dasyatis pastinaca" = "pastinaca",
"Scyliorhinus stellaris" = "stellaris", "Dasyatis centroura" = "centroura",
"Torpedo" = "torpedo")
#ajouter les points et la légende
table(gps_data$NOMCITE)
gps_data<- gps_data %>% mutate(NOMCITE= trimws(NOMCITE))
especes<-factor(gps_data$NOMCITE)
#couleurs<- rainbow(length(levels(especes)))
couleurs2<-c("hotpink2",  "aquamarine4", "deeppink4", "cadetblue", "coral4", "salmon", "tan1",
"deeppink", "darkblue", "blueviolet", "red", "blue", "aquamarine", "cornflowerblue",
"plum1", "burlywood4")
points(gps_data, col=couleurs2[especes], pch=19, cex=0.7)
title(main = "Carte de répartition des observations par espèces en Méditarranée occidentale")
legend("bottom", pch = 19, legend = levels(especes), col = couleurs2,
cex = 0.6, ncol=6, bty="n", pt.cex = 1.2, text.col = "black")
#renommer si nécessaire le nom des variables de nos observations
colnames(donnees_na)<-c("CLEOBS","NOMCITE","LON","LAT","DATEDEBUT")
#format numérique pour les données de latitudes et de longitudes
donnees_na$LON<-as.numeric(as.character(donnees_na$LON))
donnees_na$LAT<-as.numeric(as.character(donnees_na$LAT))
#quel taille devra faire notre carte pour accueillir tous les poins ? Minimum et maximum
max(donnees_na$LON)
max(donnees_na$LAT)
min(donnees_na$LON)
min(donnees_na$LAT)
#création d'un data frame pour faire la carte
donnees_df<- data.frame(donnees_na$LON, donnees_na$LAT, donnees_na$NOMCITE)
colnames(donnees_df)<-c("LON", "LAT","NOMCITE")
#on récupère les données de bathymétrie avec getNOAA.bathy, une fonction de marmap
map <- getNOAA.bathy(lon1 = -5, lon2 = 30,
lat1 = 34, lat2 = 45,  resolution = 10, keep = T)
blues <- c("lightsteelblue4", "lightsteelblue3",
"lightsteelblue2", "lightsteelblue1")
greys <- c(grey(0.6), grey(0.93), grey(0.99))
plot(map, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map), greys),
c(min(map), 0, blues)))
#renommer les espèces pour clarifier la carte
#1"Aetobatus narinari" = "Raie leopard"
#2"Cetorhinus maximus" = "Requin pelerin"
#3"Myliobatis aquila" = "Raie aigle"
#4"Pteroplatytrygon violacea" = "Raie pastenague violette"
#5"Rhincodon typus" = "Requin baleine"
#6"Raja undulata" = "Raie brunette"
#7"Scyliorhinus canicula" = "Petite roussette"
#8"Torpedo marmorata" =  "Raie torpille marbrée"
#9"Dasyatis pastinaca" = "Raie pastenague"
#10"Raies" = "Raie"
#11"Scyliorhinus stellaris" = "Requin Grande roussette"
#12"Dasyatis centroura" = "Raie pastenague épineuse"
#13"Mobula mobular" = "Raie Diable de mer mediterranéen"
#14"Prionace glauca" = "Requin bleu"
#15"Requins" = "Requin"
#16"Torpedo" = "Raie electrique"
#renommer les données avec le package "forcats" et la fonction fct_recode
gps_data$NOMCITE <- fct_recode(gps_data$NOMCITE, "Raja undulata" = "undulata", "Scyliorhinus canicula" =                 "canicula","Torpedo marmorata" = "marmorata", "Dasyatis pastinaca" = "pastinaca",
"Scyliorhinus stellaris" = "stellaris", "Dasyatis centroura" = "centroura",
"Torpedo" = "torpedo")
#ajouter les points et la légende
table(gps_data$NOMCITE)
gps_data<- gps_data %>% mutate(NOMCITE= trimws(NOMCITE))
especes<-factor(gps_data$NOMCITE)
#couleurs<- rainbow(length(levels(especes)))
couleurs2<-c("hotpink2",  "aquamarine4", "deeppink4", "cadetblue", "coral4", "salmon", "tan1",
"deeppink", "darkblue", "blueviolet", "red", "blue", "aquamarine", "cornflowerblue",
"plum1", "burlywood4")
points(gps_data, col=couleurs2[especes], pch=19, cex=0.7)
title(main = "Carte de répartition des observations par espèces en Méditarranée occidentale")
legend("bottom", pch = 19, legend = levels(especes), col = couleurs2,
cex = 0.6, ncol=6, bty="n", pt.cex = 1.2, text.col = "black")
colnames(donnees_na)<-c("","CLEOBS","NOMCITE","LON","LAT","DATEDEBUT")
max(donnees_na$LON)
max(donnees_na$LAT)
min(donnees_na$LON)
min(donnees_na$LAT)
#renommer si nécessaire le nom des variables de nos observations
colnames(donnees_na)<-c("CLEOBS","NOMCITE","LON","LAT","DATEDEBUT")
#format numérique pour les données de latitudes et de longitudes
donnees_na$LON<-as.numeric(as.character(donnees_na$LON))
donnees_na$LAT<-as.numeric(as.character(donnees_na$LAT))
#quel taille devra faire notre carte pour accueillir tous les poins ? Minimum et maximum
max(donnees_na$LON)
max(donnees_na$LAT)
min(donnees_na$LON)
min(donnees_na$LAT)
#création d'un data frame pour faire la carte
donnees_df<- data.frame(donnees_na$LON, donnees_na$LAT, donnees_na$NOMCITE)
colnames(donnees_df)<-c("LON", "LAT","NOMCITE")
#on récupère les données de bathymétrie avec getNOAA.bathy, une fonction de marmap
map <- getNOAA.bathy(lon1 = 3.5, lon2 = 4,
lat1 = 39, lat2 = 40,  resolution = 10, keep = T)
blues <- c("lightsteelblue4", "lightsteelblue3",
"lightsteelblue2", "lightsteelblue1")
greys <- c(grey(0.6), grey(0.93), grey(0.99))
plot(map, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map), greys),
c(min(map), 0, blues)))
#renommer les espèces pour clarifier la carte
#1"Aetobatus narinari" = "Raie leopard"
#2"Cetorhinus maximus" = "Requin pelerin"
#3"Myliobatis aquila" = "Raie aigle"
#4"Pteroplatytrygon violacea" = "Raie pastenague violette"
#5"Rhincodon typus" = "Requin baleine"
#6"Raja undulata" = "Raie brunette"
#7"Scyliorhinus canicula" = "Petite roussette"
#8"Torpedo marmorata" =  "Raie torpille marbrée"
#9"Dasyatis pastinaca" = "Raie pastenague"
#10"Raies" = "Raie"
#11"Scyliorhinus stellaris" = "Requin Grande roussette"
#12"Dasyatis centroura" = "Raie pastenague épineuse"
#13"Mobula mobular" = "Raie Diable de mer mediterranéen"
#14"Prionace glauca" = "Requin bleu"
#15"Requins" = "Requin"
#16"Torpedo" = "Raie electrique"
#renommer les données avec le package "forcats" et la fonction fct_recode
gps_data$NOMCITE <- fct_recode(gps_data$NOMCITE, "Raja undulata" = "undulata", "Scyliorhinus canicula" =                 "canicula","Torpedo marmorata" = "marmorata", "Dasyatis pastinaca" = "pastinaca",
"Scyliorhinus stellaris" = "stellaris", "Dasyatis centroura" = "centroura",
"Torpedo" = "torpedo")
#ajouter les points et la légende
table(gps_data$NOMCITE)
gps_data<- gps_data %>% mutate(NOMCITE= trimws(NOMCITE))
especes<-factor(gps_data$NOMCITE)
#couleurs<- rainbow(length(levels(especes)))
couleurs2<-c("hotpink2",  "aquamarine4", "deeppink4", "cadetblue", "coral4", "salmon", "tan1",
"deeppink", "darkblue", "blueviolet", "red", "blue", "aquamarine", "cornflowerblue",
"plum1", "burlywood4")
points(gps_data, col=couleurs2[especes], pch=19, cex=0.7)
title(main = "Carte de répartition des observations par espèces en Méditarranée occidentale")
legend("bottom", pch = 19, legend = levels(especes), col = couleurs2,
cex = 0.6, ncol=6, bty="n", pt.cex = 1.2, text.col = "black")
map <- getNOAA.bathy(lon1 = 3.5, lon2 = 4,
lat1 = 39, lat2 = 40,  resolution = 10, keep = T)
blues <- c("lightsteelblue4", "lightsteelblue3",
"lightsteelblue2", "lightsteelblue1")
greys <- c(grey(0.6), grey(0.93), grey(0.99))
plot(map, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map), greys),
c(min(map), 0, blues)))
map <- getNOAA.bathy(lon1 = 3.5, lon2 = 4,
lat1 = 39, lat2 = 40,  resolution = 10, keep = T)
blues <- c("lightsteelblue4", "lightsteelblue3",
"lightsteelblue2", "lightsteelblue1")
greys <- c(grey(0.6), grey(0.93), grey(0.99))
plot(map, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map), greys),
c(min(map), 0, blues)))
map <- getNOAA.bathy(lon1 = 3.5, lon2 = 4,
lat1 = 39, lat2 = 40,  resolution = 1, keep = T)
blues <- c("lightsteelblue4", "lightsteelblue3",
"lightsteelblue2", "lightsteelblue1")
greys <- c(grey(0.6), grey(0.93), grey(0.99))
plot(map, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map), greys),
c(min(map), 0, blues)))
map <- getNOAA.bathy(lon1 = 3, lon2 = 4,
lat1 = 38, lat2 = 42,  resolution = 1, keep = T)
blues <- c("lightsteelblue4", "lightsteelblue3",
"lightsteelblue2", "lightsteelblue1")
greys <- c(grey(0.6), grey(0.93), grey(0.99))
plot(map, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map), greys),
c(min(map), 0, blues)))
map <- getNOAA.bathy(lon1 = 4, lon2 = 6,
lat1 = 39.5, lat2 = 40.5,  resolution = 1, keep = T)
blues <- c("lightsteelblue4", "lightsteelblue3",
"lightsteelblue2", "lightsteelblue1")
greys <- c(grey(0.6), grey(0.93), grey(0.99))
plot(map, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map), greys),
c(min(map), 0, blues)))
map <- getNOAA.bathy(lon1 = 3, lon2 = 5,
lat1 = 39.5, lat2 = 40.5,  resolution = 1, keep = T)
blues <- c("lightsteelblue4", "lightsteelblue3",
"lightsteelblue2", "lightsteelblue1")
greys <- c(grey(0.6), grey(0.93), grey(0.99))
plot(map, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map), greys),
c(min(map), 0, blues)))
#renommer les données avec le package "forcats" et la fonction fct_recode
df$NOMCITE <- fct_recode(donnees_na$NOMCITE, "Petit poisson" = "Castagnole", "Gros poisson" =                 "Mérou")
#création d'un data frame pour faire la carte
donnees_df<- data.frame(donnees_na$LON, donnees_na$LAT, donnees_na$NOMCITE)
colnames(donnees_df)<-c("LON", "LAT","NOMCITE")
#renommer les données avec le package "forcats" et la fonction fct_recode
df$NOMCITE <- fct_recode(donnees_na$NOMCITE, "Petit poisson" = "Castagnole", "Gros poisson" =                 "Mérou")
#renommer les données avec le package "forcats" et la fonction fct_recode
donnees_na$NOMCITE <- fct_recode(donnees_na$NOMCITE, "Petit poisson" = "Castagnole", "Gros poisson" =                 "Mérou")
ap <- getNOAA.bathy(lon1 = 3, lon2 = 5,
lat1 = 39.5, lat2 = 40.5,  resolution = 1, keep = T)
blues <- c("lightsteelblue4", "lightsteelblue3",
"lightsteelblue2", "lightsteelblue1")
greys <- c(grey(0.6), grey(0.93), grey(0.99))
plot(map, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map), greys),
c(min(map), 0, blues)))
#renommer si nécessaire le nom des variables de nos observations
colnames(donnees_na)<-c("CLEOBS","NOMCITE","LON","LAT","DATEDEBUT")
#format numérique pour les données de latitudes et de longitudes
donnees_na$LON<-as.numeric(as.character(donnees_na$LON))
donnees_na$LAT<-as.numeric(as.character(donnees_na$LAT))
#quel taille devra faire notre carte pour accueillir tous les poins ? Minimum et maximum
max(donnees_na$LON)
max(donnees_na$LAT)
min(donnees_na$LON)
min(donnees_na$LAT)
#création d'un data frame pour faire la carte
donnees_df<- data.frame(donnees_na$LON, donnees_na$LAT, donnees_na$NOMCITE)
colnames(donnees_df)<-c("LON", "LAT","NOMCITE")
#on récupère les données de bathymétrie avec getNOAA.bathy, une fonction de marmap.
#resolution indique la précision 1 étant la plus précise, 10 la plus grossière. Keep = TRUE permet de garder en mémoire les données de bathymétrie importés.
map <- getNOAA.bathy(lon1 = 3, lon2 = 5,
lat1 = 39.5, lat2 = 40.5,  resolution = 1, keep = T)
#on prépare le fond bleu la mer, gris les terres
blues <- c("lightsteelblue4", "lightsteelblue3",
"lightsteelblue2", "lightsteelblue1")
greys <- c(grey(0.6), grey(0.93), grey(0.99))
#on trace la carte
plot(map, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map), greys),
c(min(map), 0, blues)))
#renommer les données avec le package "forcats" et la fonction fct_recode
donnees_na$NOMCITE <- fct_recode(donnees_na$NOMCITE, "Petit poisson" = "Castagnole", "Gros poisson" =                 "Mérou")
#ajouter les points et la légende
table(donnees_na$NOMCITE)
donnees_na<- donnees_na %>% mutate(NOMCITE= trimws(NOMCITE))
especes<-factor(donnees_na$NOMCITE)
#couleurs<- rainbow(length(levels(especes)))
couleurs2<-c("hotpink2",  "aquamarine4", "deeppink4", "cadetblue", "coral4", "salmon", "tan1",
"deeppink", "darkblue", "blueviolet", "red", "blue", "aquamarine", "cornflowerblue",
"plum1", "burlywood4")
points(donnees_na, col=couleurs2[especes], pch=19, cex=0.7)
title(main = "Carte de répartition des observations par espèces en Méditarranée occidentale")
legend("bottom", pch = 19, legend = levels(especes), col = couleurs2,
cex = 0.6, ncol=6, bty="n", pt.cex = 1.2, text.col = "black")
blogdown::serve_site()
head(donnees_df)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath("C:/Users/Miquel Pons/Documents/starter-blog/static/files"))
knitr::kable
table <- function(data) { knitr::kable(data) }
#renommer les données avec le package "forcats" et la fonction fct_recode
donnees_na$NOMCITE <- fct_recode(donnees_na$NOMCITE, "Petit poisson" = "Castagnole", "Gros poisson" =                 "Mérou")
head(donnees_na)
head(donnees_na)
blogdown
blogdown::stop_server()
blogdown::serve_site()
donnees_df$NOMCITE <- fct_recode(donnees_df$NOMCITE, "Petit poisson" = "Castagnole", "Gros poisson" =                 "Mérou")
head(donnees_df)
head(donnees_df)
donnees_df$NOMCITE <- fct_recode(donnees_df$NOMCITE, "Petit poisson" = "Castagnole", "Gros poisson" = "Mérou")
class(donnees_df$NOMCITE)
donnees_df$NOMCITE <- as.character(donnees_df$NOMCITE)
donnees_df$NOMCITE <- fct_recode(donnees_df$NOMCITE, "Petit poisson" = "Castagnole", "Gros poisson" = "Mérou")
head(donnees_df)
class(donnees_df$NOMCITE)
donnees_final$NOMCITE <- as.character(donnees_df$NOMCITE)
plot(map, image = TRUE, land = TRUE, lwd = 0.03,
bpal = list(c(0, max(map), greys),
c(min(map), 0, blues)))
#ajouter les points et la légende
table(donnees_df$NOMCITE)
donnees_df<- donnees_df %>% mutate(NOMCITE= trimws(NOMCITE))
especes<-factor(donnees_df$NOMCITE)
#couleurs<- rainbow(length(levels(especes)))
couleurs2<-c("hotpink2",  "aquamarine4", "deeppink4", "cadetblue", "coral4", "salmon", "tan1",
"deeppink", "darkblue", "blueviolet", "red", "blue", "aquamarine", "cornflowerblue",
"plum1", "burlywood4")
points(donnees_df, col=couleurs2[especes], pch=19, cex=0.7)
title(main = "Carte de répartition poissons")
legend("bottom", pch = 19, legend = levels(especes), col = couleurs2,
cex = 1, ncol=6, bty="n", pt.cex = 1, text.col = "black")
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
install.packages('lmtest')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath("C:/Users/Miquel Pons/Documents/starter-blog/static/files"))
knitr::kable
table <- function(data) { knitr::kable(data) }
library(lmtest)
ncv.test(mod)
ncvTest(mod)
ncvTest(mod)
library(ncvtest)
library(ncvTest)
library(lmtest)
ncvTest(mod)
library(cal)
library(car)
install.packages('car')
2+2
qqnorm(mod$residuals)
mod<-lm(TAILLE~PROF, donnees_na)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath("C:/Users/Miquel Pons/Documents/starter-blog/static/files"))
knitr::kable
table <- function(data) { knitr::kable(data) }
lmtest::bptest(mod)
library(dplyr)
library(tidyr)
#on importe les données
donnees<-read.csv2('donnees.csv',header=TRUE,sep=';')
#Selectionner la variable expliquée et la (ou les) variables explicatives
names(donnees)
donnees_filt<-donnees %>%
dplyr::select(TAILLE, PROF)
#supprimer les lignes avec valeurs manquantes, fonction drop_na du package 'tidyr'
donnees_na <- donnees_filt %>% drop_na(TAILLE, PROF)
summary(donnees_na)
donnees_na$PROF<-as.numeric(donnees_na$PROF)
donnees_na$TAILLE<-as.numeric(donnees_na$TAILLE)
class(donnees_na$PROF)
#régression linéaire avec fonction lm (?lm pour l'aide R)
mod<-lm(TAILLE~PROF, donnees_na)
#visualiser les données
plot(donnees_na$PROF, donnees_na$TAILLE)
abline(mod)
title("Régression linéaire")
summary(mod)
#visualiser les résidus, étant la distance des points par rapport au modèle
segments(donnees_na$PROF,fitted(mod),donnees_na$PROF, donnees_na$TAILLE)
#frame valeurs taille
min(donnees_na$PROF)
max(donnees_na$PROF)
pred.frame<-data.frame(PROF= 5:40)
#predict permet des predictions d'après les résultats du modèle
pc<-predict(mod, interval="confidence", newdata=pred.frame)
pp<-predict(mod, interval="prediction", newdata=pred.frame)
#valeur des intervalles de confiance haut et bas [,2:3]. lty le type de ligne tracés
matlines(pred.frame, pc[,2:3], lty=c(2,2), col="blue")
matlines(pred.frame, pp[,2:3], lty=c(3,3), col="red")
#légende des matlines
legend("topleft",c("confiance","prediction"),lty=c(2,3), col=c("blue","red"))
title("Régression linéaire")
summary(mod)
cor(donnees_na$PROF, donnees_na$TAILLE)
hist(mod$residuals)
qqnorm(mod$residuals)
qqline(mod$residuals)
shapiro.test(mod$residuals)
par(mfrow=c(2,2)) #rentrer 4 plots 2x2
plot(mod)
library(lmtest)
library(car)
lmtest::bptest(mod)
car::ncvTest(mod)
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath("C:/Users/Miquel Pons/Documents/starter-blog/static/files"))
#plot du RDA
plot(tRDA,type="n") #création du plot
tRDA<-rda(spe2~.,data=env)
library(FactoMineR)
library(factoextra)
library(vegan)
library(corrplot)
spe2<-decostand(spe, "hellinger") #transformation
env<-read.table("spiders_env.txt", sep="", dec=".", row.names = 1)
spe<-read.table("spiders_spe.txt", sep="", dec=".", row.names = 1)
spe2<-decostand(spe, "hellinger") #transformation
tRDA<-rda(spe2~.,data=env)
tRDA
#plot du RDA
plot(tRDA,type="n") #création du plot
text(tRDA,dis="cn", col="black") #mettre les fleches représentant les
#variables, de couleur noir
text(tRDA,"species",col="chartreuse4", cex=0.8)#ajouter les espèces,
text(tRDA, "sites", col="salmon",cex=0.8)#ajouter les sites sur le graphe,
title(main = "Analyse de redondance (RDA)")
tRDA
RDA
tRDA$colsum
tRDA$method
tRDA$inertia
tRDA$tot.chi
tRDA$Ybar
tRDA$CCA
tRDA$contrib
summary(tRDA)
summary(tRDA$Biplot)
tRDA$Biplot
summary(tRDA$scored)
summary(tRDA$scores)
tRDA$scores
blogdown::stop_server)()
blogdown::stop_server()
